syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
package proto;

service Mux {
    rpc Handshake (Node) returns (HandshakeResponse) {}
    rpc IgnoreIP (Node) returns (Node) {}
}

service PolicyStore {
    rpc Handshake (Node) returns (HandshakeResponse) {}
    rpc SetPolicy (Policy) returns (google.protobuf.Empty) {}
}

message Client {
    string name = 1;
    bytes policyAttribute = 2;
}

// Used in direct messaging
message Message {
    string Type = 1;        // What kind of message is it?
    Node sender = 2;        //
    Policy policy = 3;      //
    MsgSignature signature = 5; // Integrity check based on ECDSA
    GossipMessage gossipMessage = 6;
    Probe probe = 7;
    Dataset dataset = 8;

    // Other fields
    string stringValue = 9;
    repeated string stringSlice = 10;  // Arbitrary use
    bytes Bytes = 11;
    repeated bytes BytesSlice = 12;
    bool boolValue = 13;
}

message Response {
    MsgSignature signature = 1;// Integrity check based on ECDSA
    string stringValue = 2;
    repeated string stringSlice = 3;  // Arbitrary use
    bytes bytesValue = 4;
    repeated bytes bytesSlice = 5;
}

message StreamRequest {
    string type = 1;
    string Dataset = 2;
}

message StreamResponse {
    string type = 1;
    bytes body = 2;
}

// TODO: Deduplicate files larger than 4 MB
message File {
    string Filename = 1;
    bytes Content = 2;
    bool trailing = 3;
}

// Here, node is Lohpi storage nodes, policy store and mux (and compliance engine?)
message Node {
    string name = 1;            // String identifier
    string address = 2;         // IP address
    string role = 3;            // What type of node is it? storage node, compliance engine etc
    string contactEmail = 4;   // Contact of person/entity responsible for the node, preferably an email alias, for non-compliance reports. 
    bytes id = 5;              // Ifrit id
}

message Datasets {
    repeated Dataset datasets = 1;
    MsgSignature signature = 2;
}

message Dataset {
    string name = 1;
    Metadata metadata = 2;
    MsgSignature signature = 3;
    repeated StorageObject storageObjects = 4;
	//string owner = 2;
    //DatasetMetadata datasetMetadata = 3;
}

message Metadata {
    map<string, string> mapField = 1;
    MsgSignature signature = 2;
}

message StorageObject {
    string identifier = 1;                  // Name for this study
    Policy policy = 2;                      // Policy in effect
    string owner = 3;                       // more fields here... 
    StorageObjectContent content = 4;
    MsgSignature signature = 5;
}

message StorageObjectContent {
    bytes content = 1;
}

message Policy {
    string issuer = 1;
    string objectIdentifier = 2;
    string content = 3; // Policy details. See Casbin policy 
}

message MsgSignature {
    bytes r = 1;
    bytes s = 2;
}

message HandshakeResponse {
    string ip = 1;  // IP of the node owner
    bytes id = 2;   // From fireflies
}

// Fix later
message GossipMessage {
    string Sender = 1;              // Who sent it?
    string MessageType = 2;         // Gossip or probing?
    google.protobuf.Timestamp timestamp = 3; // Time at policy store, to keep track of messages     
    MsgSignature signature = 4;
    repeated GossipMessageBody gossipMessageBody = 5;   
}

message GossipMessageBody {
    string objectId = 1;          // subject or study. Appliy the policy to the object
    uint64 version = 2;         // Version numbering 
    Policy policy = 3;
    google.protobuf.Timestamp timestamp = 4; // Time at policy store at the time of arrival
}

message Probe {
    uint32 order = 1;
    bytes sessionId = 2;
}