syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
package proto;
option go_package = "./protobuf";

service DirectoryServer {
    rpc Handshake (Node) returns (HandshakeResponse) {}
    rpc IndexDataset (DatasetIdentifierIndexRequest) returns (google.protobuf.Empty) {}
    //rpc IgnoreIP (Node) returns (Node) {}
}

service PolicyStore {
    rpc Handshake (Node) returns (HandshakeResponse) {}
    rpc IndexDataset (DatasetIndexRequest) returns (Policy) {}
    rpc ReconcilePolicies (PolicyReconcileRequest) returns (PolicyReconcileResponse) {}
}

message Client {
    string name = 1;
    string ID = 2; // microsoft id
    string emailAddress = 3;
    string IpAddress = 4;
}

// Used in direct messaging
message Message {
    google.protobuf.Any content = 1;
    MsgSignature signature = 2;
}

message Response {
    google.protobuf.Any content = 1;
    int32 statusCode = 2;
    MsgSignature signature = 3;
}

message DatasetIdentifiers {
    repeated DatasetIdentifier identifiers = 1;
}

message DatasetIdentifier {
    string id = 1;
}

message Acknowledgment {
    string message = 1; // Retarded linter :o
}

message Node {
    string name = 1;            // String identifier
    string ifritAddress = 2;    // Ifrit IP address
    bytes id = 3;               // Ifrit id
    string httpsAddress = 4;     // IP address
    int32 port = 5; // Port
    google.protobuf.Timestamp bootTime = 6; // Join time
    string geoZone = 7; // Geographic zone
}

message Nodes {
    repeated Node nodes = 1;
}

message Dataset {
    string identifier = 1; // String identifier
    Policy policy = 2;
    IndexOption indexOption = 3;
}

message IndexOption {
    bool allowMultipleCheckouts = 1;
}

message DatasetCheckout {
    string datasetIdentifier = 1;
    google.protobuf.Timestamp DateCheckout = 2;
    Client client = 3;
    uint64 clientPolicyVersion = 4; // Version number set by policy store when a new policy is set.
    google.protobuf.Timestamp DateLatestVerification = 5;
}

message DatasetCheckouts {
    repeated DatasetCheckout datasetCheckouts = 1;
}

message ClientState {
    google.protobuf.Timestamp LastPolicyUpdate = 1;
    google.protobuf.Timestamp LastComplyCheck = 2;
}

message DatasetIndexRequest {
    string identifier = 1;
    IndexOption indexOption = 2;
    Node origin = 3;
}

message DatasetIdentifierIndexRequest {
    string identifier = 1;
    Node origin = 2;
}

message Policy {
    string datasetIdentifier = 1;
    bool content = 2; // Acutal policy content
    uint64 version = 3; // Version number set by policy store when a new policy is set.
    google.protobuf.Timestamp DateCreated = 4; // Local time when the policy was created
    google.protobuf.Timestamp DateUpdated = 5; // Local time when the policy was updated, if it exists
    google.protobuf.Timestamp DateApplied = 6; // Local time when the policy was applied to a dataset at a node
}

message PolicyReconcileRequest {
    repeated Policy policies = 1;
    Node origin = 2;
}

message PolicyReconcileResponse {
    repeated Policy policyDeltas = 1;
}

message MsgSignature {
    bytes r = 1;
    bytes s = 2;
}

message HandshakeResponse {
    string ip = 1;  // IP of the node owner
    bytes id = 2;   // From fireflies
}

message PolicyGossipUpdate {
    string Sender = 1; 
    google.protobuf.Timestamp DateSent = 2; // Time at policy store, to keep track of messages     
    repeated GossipMessageBody gossipMessageBody = 3;
    GossipMessageID gossipMessageID = 4;
}

message GossipMessageID {
    bytes PolicyStoreID = 1;
    int32 SequenceNumber = 2; // increased every time a batch is sent. Has to be retained
}

message GossipMessageBody {
    Policy policy = 1;
}

message Probe {
    uint32 order = 1;
    bytes sessionId = 2;
}

// TODO all messages below here should be put in its separate package that concerns 
// consistency in the network. It should be treated as a lower-level abstraction.
message MembershipState {
    google.protobuf.Timestamp joinTime = 1;
    // session id1
}
