syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
package proto;

service Mux {
    rpc Handshake (Node) returns (HandshakeResponse) {}
    rpc ClientHandshake (Client) returns (HandshakeResponse) {}
    rpc GetObjectHeaders (google.protobuf.Empty) returns (ObjectHeaders) {}
    rpc GetSubjectNumber (DataUserRequest) returns (StudyCount) {}
    rpc GetObjectData (DataUserRequest) returns (ObjectFiles) {}
    rpc IgnoreIP (Node) returns (Node) {}
}

service PolicyStore {
    rpc Handshake (Node) returns (HandshakeResponse) {}
    rpc GetObjectHeaders (google.protobuf.Empty) returns (ObjectHeaders) {}
    rpc StoreObjectHeader (ObjectHeader) returns (google.protobuf.Empty) {}
    rpc SetPolicy (Policy) returns (google.protobuf.Empty) {}
}

message Client {
    string name = 1;
    bytes policyAttribute = 2;
}

message StudyCount {
    uint32 count = 1;
}

message DataUserRequest {
    Client client = 1;
    string objectName = 2;
}

// Used in direct messaging
message Message {
    string Type = 1;        // What kind of message is it?
    Load load = 2;          // Used to load node with data
    Node sender = 3;        //
    ObjectHeaders objectHeaders = 4;    //    
    Policy policy = 5;      //
    MsgSignature signature = 6;// Integrity check based on ECDSA
    GossipMessage gossipMessage = 7;
    Probe probe = 8;
    ObjectFiles objectFiles = 9;
    DataUserRequest dataUserRequest = 10;
}

// Message to load a node. Distributed to all entities that need it (hint hint REC)
message Load {
    ObjectHeader objectHeader = 1;           
    uint32 Minfiles = 2;            
    uint32 Maxfiles = 3;
}

// Here, node is Lohpi storage nodes, policy store and mux (and compliance engine?)
message Node {
    string name = 1;            // String identifier
    string address = 2;         // IP address
    string role = 3;            // What type of node is it? storage node, compliance engine etc
    string contactEmail = 4;   // Contact of person/entity responsible for the node, preferably an email alias, for non-compliance reports. 
    bytes id = 5;              // Ifrit id
}

message ObjectHeader {
    string name = 1;                // Name for this study
    string directoryName = 2;            // Filename of the directory. Same for zip file
    Node node = 3;                  // The node that stores this study
    //Metadata metadata = 4;          // Metadata! Move to 'load'
    Policy policy = 4;              // Policy in effect
}

message ObjectHeaders {
    repeated ObjectHeader objectHeaders = 1;
}

message ObjectFile {
    string path = 1;
    bytes attributes = 2;
    bytes content = 3;
}

message ObjectFiles {
    repeated ObjectFile objectFiles = 2;
}

message Subject {
    string name = 1;
}

message Metadata {
    bytes content = 1;     // Metadata file contents 
    repeated string subjects = 2;  // Participating subjects
}

message Policy {
    string issuer = 1;
    string objectName = 2;
    //string filename = 2;
    bytes content = 3; // Policy details. See Casbin policy 
}

message MsgSignature {
    bytes r = 1;
    bytes s = 2;
}

message HandshakeResponse {
    string ip = 1;  // IP of the node owner
    bytes id = 2;   // From fireflies
}

message GossipMessage {
    string Sender = 1;              // Who sent it?
    string MessageType = 2;         // Gossip or probing?
    google.protobuf.Timestamp timestamp = 3; // Time at policy store, to keep track of messages     
    MsgSignature signature = 4;
    repeated GossipMessageBody gossipMessageBody = 5;   
}

message GossipMessageBody {
    string objectId = 1;          // subject or study. Appliy the policy to the object
    uint64 version = 2;         // Version numbering 
    Policy policy = 3;
    google.protobuf.Timestamp timestamp = 4; // Time at policy store at the time of arrival
}

message Probe {
    uint32 order = 1;
    bytes sessionId = 2;
}