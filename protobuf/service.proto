syntax = "proto3";
import "google/protobuf/timestamp.proto";
package proto;

service DirectoryServer {
    rpc Handshake (Node) returns (HandshakeResponse) {}
    //rpc IgnoreIP (Node) returns (Node) {}
}

service PolicyStore {
    rpc Handshake (Node) returns (HandshakeResponse) {}
}

message Client {
    string name = 1;
    string ID = 2; // microsoft id
    string emailAddress = 3;
    string macAddress = 4;
    string IpAddress = 5;
    string DNSName = 6;
}

// Used in direct messaging
message Message {
    string Type = 1;        // What kind of message is it?
    Node sender = 2;        //
    Policy policy = 3;      //
    MsgSignature signature = 5; // Integrity check based on ECDSA
    GossipMessage gossipMessage = 6;
    Probe probe = 7;
    DatasetRequest datasetRequest = 8;
    DatasetResponse datasetResponse = 9;
    PolicyRequest policyRequest = 10;
    
    DatasetSyncronization datasetSyncronization = 11;
    DatasetIdentifiersResponse datasetIdentifiersResponse = 13;
    DatasetSyncronizationDelta datasetSyncronizationDelta = 14;

    // Other fields
    string stringValue = 15;
    repeated string stringSlice = 16; 
    bytes Bytes = 17;
    repeated bytes BytesSlice = 18;
    bool boolValue = 19;
}

message Response {
    MsgSignature signature = 1;// Integrity check based on ECDSA
    string stringValue = 2;
    repeated string stringSlice = 3;  // Arbitrary use
    bytes bytesValue = 4;
    repeated bytes bytesSlice = 5;
}

// Here, node is Lohpi storage nodes, policy store and mux (and compliance engine?)
message Node {
    string name = 1;            // String identifier
    string ifritAddress = 2;    // Ifrit IP address
    bytes id = 3;               // Ifrit id
    string httpsAddress = 4;     // IP address
    int32 port = 5; // Port
    google.protobuf.Timestamp bootTime = 6; // Join time
}

message DatasetRequest {
    string identifier = 1;          // String identifier
    bytes clientToken = 2;    // access attribute from client
    MsgSignature signature = 3;
}

message Dataset {
    string identifier = 1; // String identifier
    Policy policy = 2;
    bool allowMultipleCheckouts = 3;
}

message DatasetCheckout {
    string datasetIdentifier = 1;
    google.protobuf.Timestamp DateCheckout = 2;
    Client client = 3;
    uint64 policyVersion = 4; // Version number set by policy store when a new policy is set.
}

message DatasetResponse {
    string Type = 1;        // zip/gzip/binary...
    string URL = 2;
    bool isAllowed = 3;
    string errorMessage = 4;
    MsgSignature signature = 5;
}

message ClientState {
    google.protobuf.Timestamp LastPolicyUpdate = 1;
    google.protobuf.Timestamp LastComplyCheck = 2;
}

message PolicyRequest {
    string identifier = 1;
}

message MetadataRequest {
    string identifier = 1;          // String identifier
    bytes clientToken = 2;    // access attribute from client
    MsgSignature signature = 3;
}

message MetadataResponse {
    string URL = 1;
    MsgSignature signature = 2;
}

message Policy {
    string datasetIdentifier = 2;
    bool content = 3; // Acutal policy content
    uint64 version = 4; // Version number set by policy store when a new policy is set.
    google.protobuf.Timestamp DateCreated = 5; // Local time when the policy was created
    google.protobuf.Timestamp DateUpdated = 6; // Local time when the policy was updated, if it exists
    google.protobuf.Timestamp DateApplied = 7; // Local time when the policy was applied to a dataset at a node
}

message MsgSignature {
    bytes r = 1;
    bytes s = 2;
}

message HandshakeResponse {
    string ip = 1;  // IP of the node owner
    bytes id = 2;   // From fireflies
}

message GossipMessage {
    string Sender = 1;              // Who sent it?
    string MessageType = 2;         // Gossip or probing?
    google.protobuf.Timestamp DateSent = 3; // Time at policy store, to keep track of messages     
    MsgSignature signature = 4;
    repeated GossipMessageBody gossipMessageBody = 5; //!
    GossipMessageID gossipMessageID = 6; //!
}

message GossipMessageID {
    bytes PolicyStoreID = 1;
    int32 SequenceNumber = 2; // increased every time a batch is sent. Has to be retained
}

message GossipMessageBody {
    Policy policy = 1;
    // probe!
}

message Probe {
    uint32 order = 1;
    bytes sessionId = 2;
}

// TODO all messages below here should be put in its separate package that concerns 
// consistency in the network. It should be treated as a lower-level abstraction.
message MembershipState {
    google.protobuf.Timestamp joinTime = 1;
    // session id1
}

// DEFINITIONS BELOW THIS LINE: MOVE TO ANOTHER PACKAGE/FILE

// Send from the node to LDS/PS
message DatasetIdentifiersResponse {
    repeated string newIdentifiers = 1;
    repeated string staleIdentifiers = 2;
}

// Request by node to PS. Includes policies as well
message DatasetSyncronizationDelta {
    bytes sessionID = 1;
    repeated Dataset datasets = 2;
}

message DatasetSyncronization {
    bytes sessionID = 1;
    repeated Dataset datasets = 2;
}   