// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Client
	StudyCount
	DataUserRequest
	Message
	Load
	Node
	ObjectHeader
	ObjectHeaders
	ObjectFile
	ObjectFiles
	Subject
	Metadata
	Policy
	MsgSignature
	HandshakeResponse
	GossipMessage
	GossipMessageBody
	Probe
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Client struct {
	Name            string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PolicyAttribute []byte `protobuf:"bytes,2,opt,name=policyAttribute,proto3" json:"policyAttribute,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto1.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Client) GetPolicyAttribute() []byte {
	if m != nil {
		return m.PolicyAttribute
	}
	return nil
}

type StudyCount struct {
	Count uint32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *StudyCount) Reset()                    { *m = StudyCount{} }
func (m *StudyCount) String() string            { return proto1.CompactTextString(m) }
func (*StudyCount) ProtoMessage()               {}
func (*StudyCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StudyCount) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DataUserRequest struct {
	Client     *Client `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
	ObjectName string  `protobuf:"bytes,2,opt,name=objectName" json:"objectName,omitempty"`
}

func (m *DataUserRequest) Reset()                    { *m = DataUserRequest{} }
func (m *DataUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*DataUserRequest) ProtoMessage()               {}
func (*DataUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataUserRequest) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *DataUserRequest) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

// Used in direct messaging
type Message struct {
	Type            string           `protobuf:"bytes,1,opt,name=Type" json:"Type,omitempty"`
	Load            *Load            `protobuf:"bytes,2,opt,name=load" json:"load,omitempty"`
	Sender          *Node            `protobuf:"bytes,3,opt,name=sender" json:"sender,omitempty"`
	ObjectHeaders   *ObjectHeaders   `protobuf:"bytes,4,opt,name=objectHeaders" json:"objectHeaders,omitempty"`
	Policy          *Policy          `protobuf:"bytes,5,opt,name=policy" json:"policy,omitempty"`
	Signature       *MsgSignature    `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	GossipMessage   *GossipMessage   `protobuf:"bytes,7,opt,name=gossipMessage" json:"gossipMessage,omitempty"`
	Probe           *Probe           `protobuf:"bytes,8,opt,name=probe" json:"probe,omitempty"`
	ObjectFiles     *ObjectFiles     `protobuf:"bytes,9,opt,name=objectFiles" json:"objectFiles,omitempty"`
	DataUserRequest *DataUserRequest `protobuf:"bytes,10,opt,name=dataUserRequest" json:"dataUserRequest,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Message) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Message) GetLoad() *Load {
	if m != nil {
		return m.Load
	}
	return nil
}

func (m *Message) GetSender() *Node {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Message) GetObjectHeaders() *ObjectHeaders {
	if m != nil {
		return m.ObjectHeaders
	}
	return nil
}

func (m *Message) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *Message) GetSignature() *MsgSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetGossipMessage() *GossipMessage {
	if m != nil {
		return m.GossipMessage
	}
	return nil
}

func (m *Message) GetProbe() *Probe {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *Message) GetObjectFiles() *ObjectFiles {
	if m != nil {
		return m.ObjectFiles
	}
	return nil
}

func (m *Message) GetDataUserRequest() *DataUserRequest {
	if m != nil {
		return m.DataUserRequest
	}
	return nil
}

// Message to load a node. Distributed to all entities that need it (hint hint REC)
type Load struct {
	ObjectHeader *ObjectHeader `protobuf:"bytes,1,opt,name=objectHeader" json:"objectHeader,omitempty"`
	Minfiles     uint32        `protobuf:"varint,2,opt,name=Minfiles" json:"Minfiles,omitempty"`
	Maxfiles     uint32        `protobuf:"varint,3,opt,name=Maxfiles" json:"Maxfiles,omitempty"`
}

func (m *Load) Reset()                    { *m = Load{} }
func (m *Load) String() string            { return proto1.CompactTextString(m) }
func (*Load) ProtoMessage()               {}
func (*Load) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Load) GetObjectHeader() *ObjectHeader {
	if m != nil {
		return m.ObjectHeader
	}
	return nil
}

func (m *Load) GetMinfiles() uint32 {
	if m != nil {
		return m.Minfiles
	}
	return 0
}

func (m *Load) GetMaxfiles() uint32 {
	if m != nil {
		return m.Maxfiles
	}
	return 0
}

// Here, node is Lohpi storage nodes, policy store and mux (and compliance engine?)
type Node struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address      string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Role         string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
	ContactEmail string `protobuf:"bytes,4,opt,name=contactEmail" json:"contactEmail,omitempty"`
	Id           []byte `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Node) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Node) GetContactEmail() string {
	if m != nil {
		return m.ContactEmail
	}
	return ""
}

func (m *Node) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type ObjectHeader struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DirectoryName string `protobuf:"bytes,2,opt,name=directoryName" json:"directoryName,omitempty"`
	Node          *Node  `protobuf:"bytes,3,opt,name=node" json:"node,omitempty"`
	// Metadata metadata = 4;          // Metadata! Move to 'load'
	Policy *Policy `protobuf:"bytes,4,opt,name=policy" json:"policy,omitempty"`
}

func (m *ObjectHeader) Reset()                    { *m = ObjectHeader{} }
func (m *ObjectHeader) String() string            { return proto1.CompactTextString(m) }
func (*ObjectHeader) ProtoMessage()               {}
func (*ObjectHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ObjectHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectHeader) GetDirectoryName() string {
	if m != nil {
		return m.DirectoryName
	}
	return ""
}

func (m *ObjectHeader) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ObjectHeader) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type ObjectHeaders struct {
	ObjectHeaders []*ObjectHeader `protobuf:"bytes,1,rep,name=objectHeaders" json:"objectHeaders,omitempty"`
}

func (m *ObjectHeaders) Reset()                    { *m = ObjectHeaders{} }
func (m *ObjectHeaders) String() string            { return proto1.CompactTextString(m) }
func (*ObjectHeaders) ProtoMessage()               {}
func (*ObjectHeaders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ObjectHeaders) GetObjectHeaders() []*ObjectHeader {
	if m != nil {
		return m.ObjectHeaders
	}
	return nil
}

type ObjectFile struct {
	Path       string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Attributes []byte `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Content    []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ObjectFile) Reset()                    { *m = ObjectFile{} }
func (m *ObjectFile) String() string            { return proto1.CompactTextString(m) }
func (*ObjectFile) ProtoMessage()               {}
func (*ObjectFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ObjectFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ObjectFile) GetAttributes() []byte {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ObjectFile) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ObjectFiles struct {
	ObjectFiles []*ObjectFile `protobuf:"bytes,2,rep,name=objectFiles" json:"objectFiles,omitempty"`
}

func (m *ObjectFiles) Reset()                    { *m = ObjectFiles{} }
func (m *ObjectFiles) String() string            { return proto1.CompactTextString(m) }
func (*ObjectFiles) ProtoMessage()               {}
func (*ObjectFiles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ObjectFiles) GetObjectFiles() []*ObjectFile {
	if m != nil {
		return m.ObjectFiles
	}
	return nil
}

type Subject struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto1.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Subject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Metadata struct {
	Content  []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Subjects []string `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto1.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Metadata) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Metadata) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

type Policy struct {
	Issuer string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	// string objectName = 2;
	// string filename = 2;
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto1.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Policy) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Policy) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type MsgSignature struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *MsgSignature) Reset()                    { *m = MsgSignature{} }
func (m *MsgSignature) String() string            { return proto1.CompactTextString(m) }
func (*MsgSignature) ProtoMessage()               {}
func (*MsgSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MsgSignature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *MsgSignature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type HandshakeResponse struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *HandshakeResponse) Reset()                    { *m = HandshakeResponse{} }
func (m *HandshakeResponse) String() string            { return proto1.CompactTextString(m) }
func (*HandshakeResponse) ProtoMessage()               {}
func (*HandshakeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *HandshakeResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HandshakeResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type GossipMessage struct {
	Sender            string                      `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	MessageType       string                      `protobuf:"bytes,2,opt,name=MessageType" json:"MessageType,omitempty"`
	Timestamp         *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Signature         *MsgSignature               `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	GossipMessageBody []*GossipMessageBody        `protobuf:"bytes,5,rep,name=gossipMessageBody" json:"gossipMessageBody,omitempty"`
}

func (m *GossipMessage) Reset()                    { *m = GossipMessage{} }
func (m *GossipMessage) String() string            { return proto1.CompactTextString(m) }
func (*GossipMessage) ProtoMessage()               {}
func (*GossipMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GossipMessage) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *GossipMessage) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *GossipMessage) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GossipMessage) GetSignature() *MsgSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *GossipMessage) GetGossipMessageBody() []*GossipMessageBody {
	if m != nil {
		return m.GossipMessageBody
	}
	return nil
}

type GossipMessageBody struct {
	ObjectId  string                      `protobuf:"bytes,1,opt,name=objectId" json:"objectId,omitempty"`
	Version   uint64                      `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Policy    *Policy                     `protobuf:"bytes,3,opt,name=policy" json:"policy,omitempty"`
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *GossipMessageBody) Reset()                    { *m = GossipMessageBody{} }
func (m *GossipMessageBody) String() string            { return proto1.CompactTextString(m) }
func (*GossipMessageBody) ProtoMessage()               {}
func (*GossipMessageBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GossipMessageBody) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *GossipMessageBody) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GossipMessageBody) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *GossipMessageBody) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Probe struct {
	Order     uint32 `protobuf:"varint,1,opt,name=order" json:"order,omitempty"`
	SessionId []byte `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (m *Probe) Reset()                    { *m = Probe{} }
func (m *Probe) String() string            { return proto1.CompactTextString(m) }
func (*Probe) ProtoMessage()               {}
func (*Probe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Probe) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Probe) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func init() {
	proto1.RegisterType((*Client)(nil), "proto.Client")
	proto1.RegisterType((*StudyCount)(nil), "proto.StudyCount")
	proto1.RegisterType((*DataUserRequest)(nil), "proto.DataUserRequest")
	proto1.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterType((*Load)(nil), "proto.Load")
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*ObjectHeader)(nil), "proto.ObjectHeader")
	proto1.RegisterType((*ObjectHeaders)(nil), "proto.ObjectHeaders")
	proto1.RegisterType((*ObjectFile)(nil), "proto.ObjectFile")
	proto1.RegisterType((*ObjectFiles)(nil), "proto.ObjectFiles")
	proto1.RegisterType((*Subject)(nil), "proto.Subject")
	proto1.RegisterType((*Metadata)(nil), "proto.Metadata")
	proto1.RegisterType((*Policy)(nil), "proto.Policy")
	proto1.RegisterType((*MsgSignature)(nil), "proto.MsgSignature")
	proto1.RegisterType((*HandshakeResponse)(nil), "proto.HandshakeResponse")
	proto1.RegisterType((*GossipMessage)(nil), "proto.GossipMessage")
	proto1.RegisterType((*GossipMessageBody)(nil), "proto.GossipMessageBody")
	proto1.RegisterType((*Probe)(nil), "proto.Probe")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mux service

type MuxClient interface {
	Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error)
	ClientHandshake(ctx context.Context, in *Client, opts ...grpc.CallOption) (*HandshakeResponse, error)
	GetObjectHeaders(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ObjectHeaders, error)
	GetSubjectNumber(ctx context.Context, in *DataUserRequest, opts ...grpc.CallOption) (*StudyCount, error)
	GetObjectData(ctx context.Context, in *DataUserRequest, opts ...grpc.CallOption) (*ObjectFiles, error)
	IgnoreIP(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
}

type muxClient struct {
	cc *grpc.ClientConn
}

func NewMuxClient(cc *grpc.ClientConn) MuxClient {
	return &muxClient{cc}
}

func (c *muxClient) Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := grpc.Invoke(ctx, "/proto.Mux/Handshake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxClient) ClientHandshake(ctx context.Context, in *Client, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := grpc.Invoke(ctx, "/proto.Mux/ClientHandshake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxClient) GetObjectHeaders(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ObjectHeaders, error) {
	out := new(ObjectHeaders)
	err := grpc.Invoke(ctx, "/proto.Mux/GetObjectHeaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxClient) GetSubjectNumber(ctx context.Context, in *DataUserRequest, opts ...grpc.CallOption) (*StudyCount, error) {
	out := new(StudyCount)
	err := grpc.Invoke(ctx, "/proto.Mux/GetSubjectNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxClient) GetObjectData(ctx context.Context, in *DataUserRequest, opts ...grpc.CallOption) (*ObjectFiles, error) {
	out := new(ObjectFiles)
	err := grpc.Invoke(ctx, "/proto.Mux/GetObjectData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxClient) IgnoreIP(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/proto.Mux/IgnoreIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mux service

type MuxServer interface {
	Handshake(context.Context, *Node) (*HandshakeResponse, error)
	ClientHandshake(context.Context, *Client) (*HandshakeResponse, error)
	GetObjectHeaders(context.Context, *google_protobuf.Empty) (*ObjectHeaders, error)
	GetSubjectNumber(context.Context, *DataUserRequest) (*StudyCount, error)
	GetObjectData(context.Context, *DataUserRequest) (*ObjectFiles, error)
	IgnoreIP(context.Context, *Node) (*Node, error)
}

func RegisterMuxServer(s *grpc.Server, srv MuxServer) {
	s.RegisterService(&_Mux_serviceDesc, srv)
}

func _Mux_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mux/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).Handshake(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mux_ClientHandshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).ClientHandshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mux/ClientHandshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).ClientHandshake(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mux_GetObjectHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).GetObjectHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mux/GetObjectHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).GetObjectHeaders(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mux_GetSubjectNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).GetSubjectNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mux/GetSubjectNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).GetSubjectNumber(ctx, req.(*DataUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mux_GetObjectData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).GetObjectData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mux/GetObjectData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).GetObjectData(ctx, req.(*DataUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mux_IgnoreIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).IgnoreIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mux/IgnoreIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).IgnoreIP(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mux_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mux",
	HandlerType: (*MuxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Mux_Handshake_Handler,
		},
		{
			MethodName: "ClientHandshake",
			Handler:    _Mux_ClientHandshake_Handler,
		},
		{
			MethodName: "GetObjectHeaders",
			Handler:    _Mux_GetObjectHeaders_Handler,
		},
		{
			MethodName: "GetSubjectNumber",
			Handler:    _Mux_GetSubjectNumber_Handler,
		},
		{
			MethodName: "GetObjectData",
			Handler:    _Mux_GetObjectData_Handler,
		},
		{
			MethodName: "IgnoreIP",
			Handler:    _Mux_IgnoreIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for PolicyStore service

type PolicyStoreClient interface {
	Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error)
	// rpc GetObjectHeaders (google.protobuf.Empty) returns (ObjectHeaders) {}
	// rpc StoreObjectHeader (ObjectHeader) returns (google.protobuf.Empty) {}
	SetPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type policyStoreClient struct {
	cc *grpc.ClientConn
}

func NewPolicyStoreClient(cc *grpc.ClientConn) PolicyStoreClient {
	return &policyStoreClient{cc}
}

func (c *policyStoreClient) Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := grpc.Invoke(ctx, "/proto.PolicyStore/Handshake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyStoreClient) SetPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/proto.PolicyStore/SetPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PolicyStore service

type PolicyStoreServer interface {
	Handshake(context.Context, *Node) (*HandshakeResponse, error)
	// rpc GetObjectHeaders (google.protobuf.Empty) returns (ObjectHeaders) {}
	// rpc StoreObjectHeader (ObjectHeader) returns (google.protobuf.Empty) {}
	SetPolicy(context.Context, *Policy) (*google_protobuf.Empty, error)
}

func RegisterPolicyStoreServer(s *grpc.Server, srv PolicyStoreServer) {
	s.RegisterService(&_PolicyStore_serviceDesc, srv)
}

func _PolicyStore_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyStoreServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyStore/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyStoreServer).Handshake(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyStore_SetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyStoreServer).SetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyStore/SetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyStoreServer).SetPolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PolicyStore",
	HandlerType: (*PolicyStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _PolicyStore_Handshake_Handler,
		},
		{
			MethodName: "SetPolicy",
			Handler:    _PolicyStore_SetPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for Rec service

type RecClient interface {
	Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error)
	StoreObjectHeader(ctx context.Context, in *ObjectHeader, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type recClient struct {
	cc *grpc.ClientConn
}

func NewRecClient(cc *grpc.ClientConn) RecClient {
	return &recClient{cc}
}

func (c *recClient) Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := grpc.Invoke(ctx, "/proto.Rec/Handshake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recClient) StoreObjectHeader(ctx context.Context, in *ObjectHeader, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/proto.Rec/StoreObjectHeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rec service

type RecServer interface {
	Handshake(context.Context, *Node) (*HandshakeResponse, error)
	StoreObjectHeader(context.Context, *ObjectHeader) (*google_protobuf.Empty, error)
}

func RegisterRecServer(s *grpc.Server, srv RecServer) {
	s.RegisterService(&_Rec_serviceDesc, srv)
}

func _Rec_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rec/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecServer).Handshake(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rec_StoreObjectHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecServer).StoreObjectHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rec/StoreObjectHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecServer).StoreObjectHeader(ctx, req.(*ObjectHeader))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rec",
	HandlerType: (*RecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Rec_Handshake_Handler,
		},
		{
			MethodName: "StoreObjectHeader",
			Handler:    _Rec_StoreObjectHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto1.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xfd, 0x6e, 0x1b, 0x45,
	0x10, 0xf7, 0x9d, 0x1d, 0x27, 0x37, 0xb6, 0x09, 0xd9, 0x56, 0xd1, 0xc9, 0x7c, 0x34, 0x5a, 0x3e,
	0x14, 0xf1, 0x87, 0x2b, 0x9c, 0x48, 0x40, 0x01, 0x51, 0x52, 0x9a, 0x36, 0x08, 0x87, 0x6a, 0x5d,
	0x24, 0xc4, 0x7f, 0x67, 0xdf, 0xd4, 0x3d, 0xb0, 0x6f, 0x8f, 0xdb, 0xbd, 0x52, 0x4b, 0x48, 0xbc,
	0x02, 0xcf, 0xc1, 0xdb, 0xf0, 0x10, 0xbc, 0x06, 0x42, 0xfb, 0x71, 0xf6, 0xad, 0x7d, 0x8e, 0x68,
	0xff, 0xf2, 0xcd, 0xcc, 0x6f, 0x76, 0xe7, 0xe3, 0xb7, 0x33, 0x86, 0x9e, 0xc0, 0xfc, 0x45, 0x32,
	0xc5, 0x41, 0x96, 0x73, 0xc9, 0xc9, 0x9e, 0xfe, 0xe9, 0xbf, 0x35, 0xe3, 0x7c, 0x36, 0xc7, 0xbb,
	0x5a, 0x9a, 0x14, 0xcf, 0xee, 0xe2, 0x22, 0x93, 0x4b, 0x83, 0xe9, 0xdf, 0xd9, 0x34, 0xca, 0x64,
	0x81, 0x42, 0x46, 0x8b, 0xcc, 0x00, 0xe8, 0x25, 0xb4, 0x1f, 0xcc, 0x13, 0x4c, 0x25, 0x21, 0xd0,
	0x4a, 0xa3, 0x05, 0x86, 0xde, 0x89, 0x77, 0x1a, 0x30, 0xfd, 0x4d, 0x4e, 0xe1, 0x30, 0xe3, 0xf3,
	0x64, 0xba, 0xfc, 0x5a, 0xca, 0x3c, 0x99, 0x14, 0x12, 0x43, 0xff, 0xc4, 0x3b, 0xed, 0xb2, 0x4d,
	0x35, 0xa5, 0x00, 0x63, 0x59, 0xc4, 0xcb, 0x07, 0xbc, 0x48, 0x25, 0xb9, 0x0d, 0x7b, 0x53, 0xf5,
	0xa1, 0x0f, 0xeb, 0x31, 0x23, 0xd0, 0x1f, 0xe1, 0xf0, 0x9b, 0x48, 0x46, 0x3f, 0x08, 0xcc, 0x19,
	0xfe, 0x5a, 0xa0, 0x90, 0xe4, 0x03, 0x68, 0x4f, 0xf5, 0xf5, 0x1a, 0xd9, 0x19, 0xf6, 0x4c, 0x58,
	0x03, 0x13, 0x13, 0xb3, 0x46, 0xf2, 0x2e, 0x00, 0x9f, 0xfc, 0x8c, 0x53, 0x79, 0xad, 0x22, 0xf4,
	0x75, 0x84, 0x15, 0x0d, 0xfd, 0xbb, 0x09, 0xfb, 0x23, 0x14, 0x22, 0x9a, 0xa1, 0xca, 0xe3, 0xe9,
	0x32, 0x5b, 0xe5, 0xa1, 0xbe, 0xc9, 0x1d, 0x68, 0xcd, 0x79, 0x14, 0x6b, 0xcf, 0xce, 0xb0, 0x63,
	0x2f, 0xf9, 0x8e, 0x47, 0x31, 0xd3, 0x06, 0xf2, 0x1e, 0xb4, 0x05, 0xa6, 0x31, 0xe6, 0x61, 0xd3,
	0x81, 0x5c, 0xf3, 0x18, 0x99, 0x35, 0x91, 0x7b, 0xd0, 0x33, 0x77, 0x3e, 0xc6, 0x28, 0xc6, 0x5c,
	0x84, 0x2d, 0x8d, 0xbd, 0x6d, 0xb1, 0xdf, 0x57, 0x6d, 0xcc, 0x85, 0xaa, 0x44, 0x4d, 0xc9, 0xc2,
	0x3d, 0x27, 0xd1, 0x27, 0x5a, 0xc9, 0xac, 0x91, 0x7c, 0x0c, 0x81, 0x48, 0x66, 0x69, 0x24, 0x8b,
	0x1c, 0xc3, 0xb6, 0x46, 0xde, 0xb2, 0xc8, 0x91, 0x98, 0x8d, 0x4b, 0x13, 0x5b, 0xa3, 0x54, 0x54,
	0x33, 0x2e, 0x44, 0x92, 0xd9, 0x02, 0x84, 0xfb, 0x4e, 0x54, 0x8f, 0xaa, 0x36, 0xe6, 0x42, 0x09,
	0x05, 0x45, 0xa2, 0x09, 0x86, 0x07, 0xda, 0xa7, 0x5b, 0x06, 0xa5, 0x74, 0xcc, 0x98, 0xc8, 0x39,
	0x74, 0x4c, 0x2a, 0x97, 0xc9, 0x1c, 0x45, 0x18, 0x68, 0x24, 0x71, 0x72, 0xd6, 0x16, 0x56, 0x85,
	0x91, 0xfb, 0x70, 0x18, 0xbb, 0xbd, 0x0e, 0x41, 0x7b, 0x1e, 0x5b, 0xcf, 0x0d, 0x26, 0xb0, 0x4d,
	0x38, 0xfd, 0x0d, 0x5a, 0xaa, 0x41, 0xe4, 0x13, 0xe8, 0x56, 0x4b, 0x69, 0x89, 0x72, 0xab, 0xa6,
	0xe8, 0xcc, 0x01, 0x92, 0x3e, 0x1c, 0x8c, 0x92, 0xf4, 0x99, 0x8e, 0xda, 0xd7, 0x3c, 0x5c, 0xc9,
	0xda, 0x16, 0xbd, 0x34, 0xb6, 0xa6, 0xb5, 0x59, 0x99, 0xfe, 0x0e, 0x2d, 0xd5, 0xf6, 0xda, 0x07,
	0x11, 0xc2, 0x7e, 0x14, 0xc7, 0x39, 0x0a, 0x61, 0x59, 0x58, 0x8a, 0x0a, 0x9d, 0xf3, 0x39, 0xea,
	0xd3, 0x02, 0xa6, 0xbf, 0x09, 0x85, 0xee, 0x94, 0xa7, 0x32, 0x9a, 0xca, 0x87, 0x8b, 0x28, 0x99,
	0x6b, 0xbe, 0x04, 0xcc, 0xd1, 0x91, 0x37, 0xc0, 0x4f, 0x62, 0x4d, 0x8a, 0x2e, 0xf3, 0x93, 0x98,
	0xfe, 0xe9, 0x41, 0xb7, 0x9a, 0x54, 0x6d, 0x18, 0xef, 0x43, 0x2f, 0x4e, 0x72, 0x9c, 0x4a, 0x9e,
	0x2f, 0x2b, 0x4f, 0xc2, 0x55, 0x2a, 0xd6, 0xa7, 0x3c, 0xc6, 0x3a, 0x4a, 0x6b, 0x43, 0x85, 0x94,
	0xad, 0x1b, 0x48, 0x49, 0xbf, 0x85, 0x9e, 0xc3, 0x6d, 0xf2, 0xd9, 0xe6, 0x43, 0xf0, 0x4e, 0x9a,
	0xbb, 0x7a, 0xe2, 0x22, 0xe9, 0x4f, 0x00, 0x6b, 0xce, 0xa8, 0xdc, 0xb2, 0x48, 0x3e, 0x2f, 0x73,
	0x53, 0xdf, 0xea, 0xad, 0x47, 0xe5, 0x58, 0x11, 0x76, 0xdc, 0x54, 0x34, 0xaa, 0x05, 0xaa, 0x80,
	0x6a, 0x66, 0x34, 0xb5, 0xb1, 0x14, 0xe9, 0x05, 0x74, 0x2a, 0x7c, 0x24, 0x67, 0x2e, 0x71, 0x7d,
	0x1d, 0xe3, 0xd1, 0x16, 0x71, 0x1d, 0xde, 0xd2, 0x77, 0x60, 0x7f, 0x5c, 0x68, 0xb9, 0xae, 0xf0,
	0xf4, 0x3e, 0x1c, 0x8c, 0x50, 0x46, 0x8a, 0xab, 0xd5, 0x40, 0x3c, 0x27, 0x10, 0xc5, 0x2e, 0x61,
	0x0e, 0x31, 0xd7, 0x06, 0x6c, 0x25, 0xd3, 0x7b, 0xd0, 0x36, 0xe5, 0x25, 0xc7, 0xd0, 0x4e, 0x84,
	0x28, 0x2c, 0xa5, 0x03, 0x66, 0xa5, 0xea, 0xb9, 0xbe, 0x9b, 0xe0, 0x47, 0xd0, 0xad, 0x4e, 0x01,
	0xd2, 0x05, 0x2f, 0xb7, 0x77, 0x7b, 0xb9, 0x92, 0xca, 0x7a, 0x79, 0x82, 0x9e, 0xc1, 0xd1, 0xe3,
	0x28, 0x8d, 0xc5, 0xf3, 0xe8, 0x17, 0x64, 0x28, 0x32, 0x9e, 0x0a, 0xd4, 0x64, 0xcb, 0xec, 0x75,
	0x7e, 0x92, 0x59, 0xf2, 0xf9, 0x2b, 0xf2, 0xfd, 0xeb, 0x41, 0xcf, 0x19, 0x18, 0x2a, 0xc8, 0xb1,
	0x19, 0x8c, 0x36, 0x48, 0x23, 0x91, 0x13, 0xe8, 0x58, 0x88, 0x1e, 0xb6, 0x86, 0x7f, 0x55, 0x15,
	0xf9, 0x14, 0x82, 0xd5, 0xb2, 0xb1, 0x14, 0xec, 0x0f, 0xcc, 0x3a, 0x1a, 0x94, 0xeb, 0x68, 0xf0,
	0xb4, 0x44, 0xb0, 0x35, 0xd8, 0x1d, 0x82, 0xad, 0xff, 0x35, 0x04, 0x2f, 0xe1, 0xc8, 0x99, 0x6c,
	0x17, 0x3c, 0x56, 0x93, 0x56, 0x75, 0x3c, 0xac, 0x1b, 0x84, 0xca, 0xce, 0xb6, 0x5d, 0xe8, 0x5f,
	0x1e, 0x1c, 0x6d, 0x01, 0x55, 0x3f, 0x0d, 0x47, 0xae, 0x62, 0x5b, 0x86, 0x95, 0xac, 0xba, 0xf5,
	0x02, 0x73, 0x91, 0xf0, 0x54, 0x17, 0xa1, 0xc5, 0x4a, 0xb1, 0xf2, 0xba, 0x9a, 0x37, 0x8d, 0x7c,
	0xa7, 0x4e, 0xad, 0x57, 0xa8, 0x13, 0xfd, 0x1c, 0xf6, 0xf4, 0xa4, 0x56, 0xeb, 0x96, 0xe7, 0x65,
	0x8f, 0x7a, 0xcc, 0x08, 0xe4, 0x6d, 0x08, 0x04, 0x0a, 0x15, 0xca, 0x55, 0xd9, 0xe3, 0xb5, 0x62,
	0xf8, 0x8f, 0x0f, 0xcd, 0x51, 0xf1, 0x92, 0x9c, 0x43, 0xb0, 0xe2, 0x09, 0xa9, 0xce, 0x88, 0x7e,
	0x59, 0xb8, 0x2d, 0x1a, 0xd1, 0x06, 0xf9, 0x02, 0x0e, 0xcd, 0x8a, 0x5e, 0xfb, 0xba, 0xab, 0xfb,
	0x46, 0xef, 0x0b, 0x78, 0xf3, 0x11, 0x4a, 0x77, 0xa6, 0x1c, 0x6f, 0xe5, 0xfc, 0x50, 0xfd, 0x8f,
	0xe9, 0xd7, 0x6e, 0x57, 0xda, 0x20, 0x5f, 0xe9, 0x33, 0xec, 0x5b, 0xbd, 0x2e, 0x16, 0x13, 0xcc,
	0xc9, 0x8e, 0xdd, 0xd2, 0x2f, 0x1f, 0xfd, 0xfa, 0x1f, 0x0a, 0x6d, 0x90, 0x2f, 0xa1, 0xb7, 0x0a,
	0x42, 0x39, 0xec, 0xf4, 0xae, 0xd9, 0x75, 0xb4, 0x41, 0x3e, 0x84, 0x83, 0xab, 0x59, 0xca, 0x73,
	0xbc, 0x7a, 0xe2, 0x96, 0xad, 0x2a, 0xd0, 0xc6, 0x70, 0x09, 0x1d, 0xd3, 0xf0, 0xb1, 0xe4, 0x39,
	0xbe, 0x66, 0xb9, 0xcf, 0x21, 0x18, 0xa3, 0xb4, 0x73, 0xc3, 0xe5, 0x51, 0x7f, 0x47, 0xe1, 0x68,
	0x63, 0xf8, 0x07, 0x34, 0x19, 0x4e, 0x5f, 0xf3, 0xca, 0x0b, 0x38, 0xd2, 0x11, 0x3b, 0xbb, 0xa8,
	0x6e, 0xc2, 0xef, 0x0e, 0x60, 0xd2, 0xd6, 0x9a, 0xb3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1a,
	0x58, 0xe7, 0xa0, 0xb9, 0x0a, 0x00, 0x00,
}
