// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protobuf/service.proto

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectoryServerClient is the client API for DirectoryServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryServerClient interface {
	Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error)
	IndexDataset(ctx context.Context, in *DatasetIdentifierIndexRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type directoryServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryServerClient(cc grpc.ClientConnInterface) DirectoryServerClient {
	return &directoryServerClient{cc}
}

func (c *directoryServerClient) Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, "/proto.DirectoryServer/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServerClient) IndexDataset(ctx context.Context, in *DatasetIdentifierIndexRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.DirectoryServer/IndexDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServerServer is the server API for DirectoryServer service.
// All implementations must embed UnimplementedDirectoryServerServer
// for forward compatibility
type DirectoryServerServer interface {
	Handshake(context.Context, *Node) (*HandshakeResponse, error)
	IndexDataset(context.Context, *DatasetIdentifierIndexRequest) (*empty.Empty, error)
	mustEmbedUnimplementedDirectoryServerServer()
}

// UnimplementedDirectoryServerServer must be embedded to have forward compatible implementations.
type UnimplementedDirectoryServerServer struct {
}

func (UnimplementedDirectoryServerServer) Handshake(context.Context, *Node) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedDirectoryServerServer) IndexDataset(context.Context, *DatasetIdentifierIndexRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexDataset not implemented")
}
func (UnimplementedDirectoryServerServer) mustEmbedUnimplementedDirectoryServerServer() {}

// UnsafeDirectoryServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServerServer will
// result in compilation errors.
type UnsafeDirectoryServerServer interface {
	mustEmbedUnimplementedDirectoryServerServer()
}

func RegisterDirectoryServerServer(s grpc.ServiceRegistrar, srv DirectoryServerServer) {
	s.RegisterService(&DirectoryServer_ServiceDesc, srv)
}

func _DirectoryServer_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServerServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DirectoryServer/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServerServer).Handshake(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryServer_IndexDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetIdentifierIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServerServer).IndexDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DirectoryServer/IndexDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServerServer).IndexDataset(ctx, req.(*DatasetIdentifierIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryServer_ServiceDesc is the grpc.ServiceDesc for DirectoryServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DirectoryServer",
	HandlerType: (*DirectoryServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _DirectoryServer_Handshake_Handler,
		},
		{
			MethodName: "IndexDataset",
			Handler:    _DirectoryServer_IndexDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

// PolicyStoreClient is the client API for PolicyStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyStoreClient interface {
	Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error)
	IndexDataset(ctx context.Context, in *DatasetIndexRequest, opts ...grpc.CallOption) (*Policy, error)
	ReconcilePolicies(ctx context.Context, in *PolicyReconcileRequest, opts ...grpc.CallOption) (*PolicyReconcileResponse, error)
}

type policyStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyStoreClient(cc grpc.ClientConnInterface) PolicyStoreClient {
	return &policyStoreClient{cc}
}

func (c *policyStoreClient) Handshake(ctx context.Context, in *Node, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, "/proto.PolicyStore/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyStoreClient) IndexDataset(ctx context.Context, in *DatasetIndexRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/proto.PolicyStore/IndexDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyStoreClient) ReconcilePolicies(ctx context.Context, in *PolicyReconcileRequest, opts ...grpc.CallOption) (*PolicyReconcileResponse, error) {
	out := new(PolicyReconcileResponse)
	err := c.cc.Invoke(ctx, "/proto.PolicyStore/ReconcilePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyStoreServer is the server API for PolicyStore service.
// All implementations must embed UnimplementedPolicyStoreServer
// for forward compatibility
type PolicyStoreServer interface {
	Handshake(context.Context, *Node) (*HandshakeResponse, error)
	IndexDataset(context.Context, *DatasetIndexRequest) (*Policy, error)
	ReconcilePolicies(context.Context, *PolicyReconcileRequest) (*PolicyReconcileResponse, error)
	mustEmbedUnimplementedPolicyStoreServer()
}

// UnimplementedPolicyStoreServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyStoreServer struct {
}

func (UnimplementedPolicyStoreServer) Handshake(context.Context, *Node) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedPolicyStoreServer) IndexDataset(context.Context, *DatasetIndexRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexDataset not implemented")
}
func (UnimplementedPolicyStoreServer) ReconcilePolicies(context.Context, *PolicyReconcileRequest) (*PolicyReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconcilePolicies not implemented")
}
func (UnimplementedPolicyStoreServer) mustEmbedUnimplementedPolicyStoreServer() {}

// UnsafePolicyStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyStoreServer will
// result in compilation errors.
type UnsafePolicyStoreServer interface {
	mustEmbedUnimplementedPolicyStoreServer()
}

func RegisterPolicyStoreServer(s grpc.ServiceRegistrar, srv PolicyStoreServer) {
	s.RegisterService(&PolicyStore_ServiceDesc, srv)
}

func _PolicyStore_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyStoreServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyStore/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyStoreServer).Handshake(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyStore_IndexDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyStoreServer).IndexDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyStore/IndexDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyStoreServer).IndexDataset(ctx, req.(*DatasetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyStore_ReconcilePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyStoreServer).ReconcilePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyStore/ReconcilePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyStoreServer).ReconcilePolicies(ctx, req.(*PolicyReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyStore_ServiceDesc is the grpc.ServiceDesc for PolicyStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PolicyStore",
	HandlerType: (*PolicyStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _PolicyStore_Handshake_Handler,
		},
		{
			MethodName: "IndexDataset",
			Handler:    _PolicyStore_IndexDataset_Handler,
		},
		{
			MethodName: "ReconcilePolicies",
			Handler:    _PolicyStore_ReconcilePolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}
